"""
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 AUTOTECHNIK BOT ¬∑ main.py ¬∑ v4.8  (ChatGPT + polling fix v2)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""

import asyncio
import json
import logging
import os
import re
import sqlite3
from collections import defaultdict, deque
from urllib.parse import quote_plus

import httpx
import nest_asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from telegram.request import HTTPXRequest
from dotenv import load_dotenv
import openai

load_dotenv()
openai.api_key = "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"

# ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
API_BASE       = "https://www.autotechnik.store/api/v1"
API_TOKEN      = "d579a8bdade5445c3683a0bb9526b657de79de53"
BOT_TOKEN      = os.getenv("TG_BOT_TOKEN")
CHECK_INTERVAL = 120
REMIND_INTERVAL= 120
DB_PATH        = "db.sqlite3"
HISTORY_LIMIT  = 50

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)-7s | %(message)s")

# ‚îÄ‚îÄ‚îÄ DATABASE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur  = conn.cursor()
cur.executescript("""
CREATE TABLE IF NOT EXISTS users (
    telegram_id   INTEGER PRIMARY KEY,
    phone         TEXT,
    customer_id   INTEGER,
    manager_login TEXT,
    last_statuses TEXT
);
CREATE TABLE IF NOT EXISTS managers (
    manager_login TEXT PRIMARY KEY,
    telegram_id   INTEGER
);
""")
conn.commit()

# ‚îÄ‚îÄ‚îÄ STATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
client_chat   = {}               # client_tid ‚Üí customer_id
manager_chat  = {}               # manager_tid ‚Üí customer_id
chat_manager  = {}               # customer_id ‚Üí manager_login
unread        = defaultdict(set) # manager_tid ‚Üí set(customer_id)
history       = defaultdict(lambda: deque(maxlen=HISTORY_LIMIT))
bot_chat_mode = {}               # telegram_id ‚Üí bool

# ‚îÄ‚îÄ‚îÄ HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def normalize(ph: str | None) -> str:
    return ''.join(filter(str.isdigit, ph or ''))[-10:]

def clean(t: str | None) -> str:
    return (t or "").replace('\u00A0', ' ').strip()

def rub(val) -> str:
    try:
        return f"{float(val):,.2f}".replace(',', ' ') + " ‚ÇΩ"
    except:
        return "‚Äî"

def manager_tid(login: str) -> int | None:
    cur.execute("SELECT telegram_id FROM managers WHERE manager_login=?", (login,))
    r = cur.fetchone()
    return r[0] if r else None

# ‚îÄ‚îÄ‚îÄ KEYBOARDS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def kb_start():
    return ReplyKeyboardMarkup([[KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]], resize_keyboard=True)

def kb_client():
    return ReplyKeyboardMarkup(
        [
            ["üí¨ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"],
            ["üìã –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"],
            ["üéÅ –ë–æ–Ω—É—Å–Ω–∞—è-–∫–∞—Ä—Ç–∞"],
            ["üìö –ö–∞—Ç–∞–ª–æ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤"],
            ["–ß–∞—Ç —Å –±–æ—Ç–æ–º"]
        ],
        resize_keyboard=True
    )

def kb_manager():
    return ReplyKeyboardMarkup([["üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"], ["üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã"]], resize_keyboard=True)

def ikb_mgr_chat():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üõë –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data="mgr_close"),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è",    callback_data="mgr_history"),
    ]])

def ikb_cli_chat():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="cli_close"),
    ]])

def kb_client_chat():
    return ReplyKeyboardMarkup([["üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"]], resize_keyboard=True)

# ‚îÄ‚îÄ‚îÄ ORDER MESSAGE BUILDER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
READY_PLAIN = re.compile(r"^–≥–æ—Ç–æ–≤–æ?\s+–∫\s+–≤—ã–¥–∞—á–µ$", re.I)
READY_DAY   = re.compile(r"^–≥–æ—Ç–æ–≤–æ?\s+–∫\s+–≤—ã–¥–∞—á–µ\s+(\d+)", re.I)
EXCLUDED    = {s.lower() for s in {
    "–í—ã–¥–∞–Ω–æ","–û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞","–û—Ç–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞",
    "–û—Ç–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã—à–µ–ª —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
    "–≤–æ–∑–≤—Ä–∞—Ç –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è","–í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫—É",
    "–í–æ–∑–≤—Ä–∞—Ç –æ–¥–æ–±—Ä–µ–Ω","–í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω"
}}

def order_message(oid, name, price, status, addr="", list_mode=False):
    st = clean(status)
    base = f"üì¶ *–ó–∞–∫–∞–∑ ‚Ññ{oid}*\n"
    addr_line = f"\nüè† –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: {addr}" if addr else ""
    if READY_PLAIN.fullmatch(st):
        return base + f"{clean(name)} ‚Äî {rub(price)}{addr_line}\nüè¨ *–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!*"
    m = READY_DAY.match(st)
    if m:
        day = int(m.group(1))
        if day == 7:
            return base + f"{clean(name)} ‚Äî {rub(price)}{addr_line}\n‚ö†Ô∏è *–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ö—Ä–∞–Ω–µ–Ω–∏—è!*"
        else:
            return base + f"{clean(name)} ‚Äî {rub(price)}{addr_line}\nüìÖ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è."
    if list_mode and st.lower() in EXCLUDED:
        return None
    return base + f"üõí {clean(name)} ‚Äî {rub(price)}\nüìå –°—Ç–∞—Ç—É—Å: {status}{addr_line}"

# ‚îÄ‚îÄ‚îÄ CATALOGS DATA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CATALOG_SECTIONS = {
    "61": [
        ("–ó–∞–ø—á–∞—Å—Ç–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º",                "https://www.autotechnik.store/d_catalog3/61/"),
        ("–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≥—Ä—É–∑–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏",       "https://www.autotechnik.store/d_catalog3/124/"),
        ("–°–∏–ª–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã",                    "https://www.autotechnik.store/d_catalog3/126/"),
        ("–ë–∞—á–∫–∏",                               "https://www.autotechnik.store/d_catalog3/61/bachci/"),
        ("–í—Ç—É–ª–∫–∏",                              "https://www.autotechnik.store/d_catalog3/61/vtulci/"),
        ("–í—Ç—É–ª–∫–∏ –º–µ—Ç–∞–ª–∏—á–µ—Å–∫–∏–µ",                 "https://www.autotechnik.store/d_catalog3/61/vtulci-metalichescie/"),
        ("–í—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",                   "https://www.autotechnik.store/d_catalog3/61/vihlopnaya-sistema/"),
        ("–ó–∞–≥–ª—É—à–∫–∏ / –î–µ—Ä–∂–∞—Ç–µ–ª–∏",                "https://www.autotechnik.store/d_catalog3/61/zaglushci/"),
        ("–ó–∞–º–∫–∏",                               "https://www.autotechnik.store/d_catalog3/61/zamci/"),
        ("–ó–∞–ø—á–∞—Å—Ç–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è",                  "https://www.autotechnik.store/d_catalog3/61/zapchasti-dvigatelya/"),
        ("–ó–µ—Ä–∫–∞–ª–∞",                             "https://www.autotechnik.store/d_catalog3/61/zercala/"),
        ("–ö–æ–∂—É—Ö–∏",                              "https://www.autotechnik.store/d_catalog3/61/corpusa--cojuhi/"),
        ("–ö—Ä–∞–Ω—ã",                               "https://www.autotechnik.store/d_catalog3/61/crani/"),
        ("–ö—Ä–µ—Å—Ç–æ–≤–∏–Ω—ã",                          "https://www.autotechnik.store/d_catalog3/61/crestovini/"),
        ("–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã",                          "https://www.autotechnik.store/d_catalog3/61/cronshteini/"),
    ],
    "autocatalog": [
        ("–ü–æ–¥–±–æ—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", "https://www.autotechnik.store/autocatalog/"),
        ("–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏",           "https://www.autotechnik.store/d_catalog3/94/"),
        ("–°–∞–ª—å–Ω–∏–∫–∏",             "https://www.autotechnik.store/d_catalog3/98/"),
        ("–†–µ–º–Ω–∏",                "https://www.autotechnik.store/d_catalog3/97/"),
    ],
    "110": [
        ("–ú–∞—Å–ª–∞",                    "https://www.autotechnik.store/d_catalog3/110/"),
        ("–ú–∞—Å–ª–∞ –º–æ—Ç–æ—Ä–Ω—ã–µ",           "https://www.autotechnik.store/d_catalog3/110/maslo-motornoe/"),
        ("–ú–∞—Å–ª–∞ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ",    "https://www.autotechnik.store/d_catalog3/110/maslo-transmissionnoe-/"),
    ],
    "100": [
        ("–§–∏–ª—å—Ç—Ä–∞",                 "https://www.autotechnik.store/d_catalog3/100/"),
        ("–ú–∞—Å–ª—è–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞",        "https://www.autotechnik.store/d_catalog3/100/maslyanie-filtra/"),
    ],
    "103": [
        ("–ê–≤—Ç–æ—Ö–∏–º–∏—è",               "https://www.autotechnik.store/d_catalog3/103/"),
        ("AdBlue",                  "https://www.autotechnik.store/d_catalog3/103/adblue/"),
    ],
    "42": [
        ("–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "https://www.autotechnik.store/d_catalog3/42/"),
    ],
    "140": [
        ("–ê–±—Ä–∞–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",    "https://www.autotechnik.store/d_catalog3/140/"),
    ],
    "142": [
        ("–ê–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",          "https://www.autotechnik.store/d_catalog3/142/"),
    ],
    "31": [
        ("–ö—Ä–µ–ø—ë–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",      "https://www.autotechnik.store/d_catalog3/31/"),
    ],
    "145": [
        ("–§–∞—Ä–∫–æ–ø—ã",                 "https://www.autotechnik.store/d_catalog3/145/"),
    ],
    "102": [
        ("–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",     "https://www.autotechnik.store/d_catalog3/102/"),
    ],
}

async def h_catalogs(u: Update, _):
    buttons = [
        [InlineKeyboardButton("1. –ó–∞–ø—á–∞—Å—Ç–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="cat:61")],
        [InlineKeyboardButton("2. –ü–æ–¥–±–æ—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data="cat:autocatalog")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_client")],
    ]
    await u.message.reply_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=InlineKeyboardMarkup(buttons))

async def h_catalog_section(cbq: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await cbq.callback_query.answer()
    data = cbq.callback_query.data
    if data == "back_to_client":
        await cbq.callback_query.message.delete()
        return await cbq.callback_query.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=kb_client())
    _, key = data.split(":", 1)
    items = CATALOG_SECTIONS.get(key, [])
    buttons = [[InlineKeyboardButton(txt, url=url)] for txt, url in items]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cat:61")])
    await cbq.callback_query.message.edit_text("üîπ –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã:", reply_markup=InlineKeyboardMarkup(buttons))

# ‚îÄ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def h_start(u: Update, _):
    uid = u.effective_user.id
    cur.execute("SELECT 1 FROM managers WHERE telegram_id=?", (uid,))
    if cur.fetchone():
        await u.message.reply_text("üëã –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", parse_mode="Markdown", reply_markup=kb_manager())
    else:
        await u.message.reply_text("üëã –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:", parse_mode="Markdown", reply_markup=kb_start())

# ‚îÄ‚îÄ‚îÄ /manager or /reg1664 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def h_mgr_reg(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not c.args:
        return await u.message.reply_text("–§–æ—Ä–º–∞—Ç: `/reg1664 <–ª–æ–≥–∏–Ω>`", parse_mode="Markdown")
    login = c.args[0]
    cur.execute("INSERT OR REPLACE INTO managers VALUES(?,?)", (login, u.effective_user.id))
    conn.commit()
    await u.message.reply_text("‚úÖ –í—ã ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=kb_manager())

# ‚îÄ‚îÄ‚îÄ Contact ‚Üí client auth ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def h_contact(u: Update, _):
    phone = normalize(u.message.contact.phone_
